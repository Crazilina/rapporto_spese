"""Initial migration

Revision ID: 2dc617a056e2
Revises: 
Create Date: 2025-01-28 23:22:11.348614

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision = '2dc617a056e2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('aziende',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nome', sa.String(length=100), nullable=False),
    sa.Column('indirizzo', sa.String(length=255), nullable=True),
    sa.Column('data_creazione', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('aziende', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_aziende_nome'), ['nome'], unique=True)

    op.create_table('utenti',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nome', sa.String(length=100), nullable=False),
    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255), nullable=False),
    sa.Column('password_hash', sa.Text(), nullable=True),
    sa.Column('ruolo', sa.String(length=10), nullable=True),
    sa.Column('azienda_id', sa.Integer(), nullable=True),
    sa.Column('email_confirmed', sa.Boolean(), nullable=True),
    sa.Column('confirmation_token', sa.String(length=256), nullable=True),
    sa.Column('data_creazione', sa.DateTime(), nullable=True),
    sa.Column('data_modifica', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['azienda_id'], ['aziende.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('confirmation_token'),
    sa.UniqueConstraint('email')
    )
    with op.batch_alter_table('utenti', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_utenti_azienda_id'), ['azienda_id'], unique=False)

    op.create_table('categorie_spese',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nome_categoria', sa.String(length=100), nullable=False),
    sa.Column('descrizione', sa.Text(), nullable=True),
    sa.Column('owner', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner'], ['utenti.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('nome_categoria')
    )
    op.create_table('lavoratori',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nome', sa.String(length=100), nullable=False),
    sa.Column('cognome', sa.String(length=100), nullable=False),
    sa.Column('data_di_nascita', sa.Date(), nullable=True),
    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255), nullable=False),
    sa.Column('posizione', sa.String(length=100), nullable=True),
    sa.Column('dipartimento', sa.String(length=100), nullable=True),
    sa.Column('azienda_id', sa.Integer(), nullable=False),
    sa.Column('utente_id', sa.Integer(), nullable=True),
    sa.Column('data_inizio', sa.Date(), nullable=False),
    sa.Column('data_fine', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['azienda_id'], ['aziende.id'], ),
    sa.ForeignKeyConstraint(['utente_id'], ['utenti.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    with op.batch_alter_table('lavoratori', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_lavoratori_cognome'), ['cognome'], unique=False)
        batch_op.create_index(batch_op.f('ix_lavoratori_nome'), ['nome'], unique=False)

    op.create_table('spese',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_lavoratore', sa.Integer(), nullable=False),
    sa.Column('id_supervisore', sa.Integer(), nullable=False),
    sa.Column('id_categoria', sa.Integer(), nullable=False),
    sa.Column('owner', sa.Integer(), nullable=False),
    sa.Column('data_spese', sa.Date(), nullable=False),
    sa.Column('totale_importo', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('valuta', postgresql.ENUM('EUR', 'USD', 'RUB', name='valuta_enum'), nullable=False),
    sa.Column('descrizione', sa.Text(), nullable=True),
    sa.Column('stato', postgresql.ENUM('Richiesta di Rimborso', 'Pagato', 'Approvato', 'Rimborsato', name='stato_enum'), nullable=True),
    sa.Column('immagine_ricevuta', sa.String(length=255), nullable=True),
    sa.Column('data_creazione', sa.DateTime(), nullable=True),
    sa.Column('data_modifica', sa.DateTime(), nullable=True),
    sa.Column('metodo_pagamento', postgresql.ENUM('Carta aziendale', 'Carta personale', 'Contanti', 'Bonifico', name='pagamento_enum'), nullable=False),
    sa.ForeignKeyConstraint(['id_categoria'], ['categorie_spese.id'], ),
    sa.ForeignKeyConstraint(['id_lavoratore'], ['lavoratori.id'], ),
    sa.ForeignKeyConstraint(['id_supervisore'], ['lavoratori.id'], ),
    sa.ForeignKeyConstraint(['owner'], ['utenti.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('spese')
    with op.batch_alter_table('lavoratori', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_lavoratori_nome'))
        batch_op.drop_index(batch_op.f('ix_lavoratori_cognome'))

    op.drop_table('lavoratori')
    op.drop_table('categorie_spese')
    with op.batch_alter_table('utenti', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_utenti_azienda_id'))

    op.drop_table('utenti')
    with op.batch_alter_table('aziende', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_aziende_nome'))

    op.drop_table('aziende')
    # ### end Alembic commands ###
